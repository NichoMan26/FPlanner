{"version":3,"sources":["Components/Shareable/preloader/Preloader.module.css","assets/img/preloader.gif","Components/SingleTask/SingleTaskForm.module.css","Components/LogoInfo/LogoInfo.jsx","Components/DateNow/DateNow.jsx","Components/Header/Header.jsx","Components/Task/Task.jsx","API/api.js","Components/TaskCreate/TaskCreate.jsx","Components/TaskHeader/TaskHeader.jsx","Components/TasksList/TasksList.jsx","redux/tasksReducer.js","Components/TasksList/TasksListContainer.jsx","redux/singleTaskReducer.js","Components/Shareable/DayPicker/DatePick.jsx","Components/SingleTask/SingleTaskForm.jsx","Components/Shareable/preloader/Preloader.jsx","Components/SingleTask/SingleTask.jsx","Components/SingleTask/SingleTaskContainer.jsx","Components/Content/Content.jsx","Components/App/App.js","serviceWorker.js","redux/store.js","index.js","Components/Task/Task.module.css","Components/LogoInfo/LogoInfo.module.css","Components/TaskCreate/TaskCreate.module.css","Components/Header/Header.module.css","Components/TaskHeader/TaskHeader.module.css"],"names":["module","exports","LogoInfo","props","useState","className","clsx","cls","logoInfo","href","icon","moment","require","DateNow","format","date","setDate","timerId","setInterval","clearTimeout","Header","header","logo","Task","task","number","deleteTask","doneTask","unDoneTask","arrDisabledTask","addInDisabledTask","taskBody","to","id","isDone","done","title","dateE","disabled","includes","data-taskid","onClick","e","preventDefault","taskId","currentTarget","getAttribute","instance","axios","baseURL","tasksAPI","get","then","response","data","newTask","JSON","stringify","post","body","delete","taskJSON","put","TaskCreate","addNewTask","titleState","setTitleState","setDisabled","action","autoFocus","onChange","value","placeholder","rows","textarea","type","newTaskId","console","log","trim","description","dateC","button","TaskHeader","TasksList","tasks","outTasks","map","idx","key","initState","disabledTask","removeFromDisabledTask","tasksReducer","state","filter","TasksListContainer","setTasks","parse","this","React","Component","connect","dispatch","err","status","singleTaskReducer","singleTask","DatePick","changeDateE","useEffect","setStartDate","Date","startDate","selected","minDate","dateFormat","showTimeInput","placeholderText","SingleTaskForm","updateSingleTask","setTaskUpdate","taskUpdate","htmlFor","label","input","checked","Preloader","preloader","src","preloaderIMG","alt","SingleTask","SingleTaskContainer","match","params","setSingleTask","newSingleTask","Content","exact","path","render","App","Boolean","window","location","hostname","reducers","combineReducers","form","formReducer","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a3269121.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__1yR4u\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.62e08d72.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SingleTaskForm_label__vtnyU\",\"input\":\"SingleTaskForm_input__yTS9i\"};","import React, {useState} from 'react'\r\nimport cls from './LogoInfo.module.css'\r\nimport clsx from 'clsx'\r\n\r\nconst LogoInfo = (props) => {\r\n    const [logIn, /*setLogIn*/] = useState(true) /// after delete this hook\r\n    return(\r\n            logIn // check login user or no and render appropriate component\r\n                ? <a className={clsx('border', 'border-primary', cls.logoInfo)} href=\"/login\">\r\n                    {true\r\n                        ? <i className={clsx(\"icon-user\", cls.icon)}></i>\r\n                        : <img src=\"\" alt=\"\"/>}\r\n                    Log Out</a> \r\n                : <a className={clsx('border', 'border-primary', cls.logoInfo)} href=\"/login\">Log In</a>\r\n    )\r\n}\r\nexport default LogoInfo","import React, {useState} from 'react'\r\nconst moment = require('moment');\r\nconst DateNow = (props) => {\r\n    const [date, setDate] = useState(moment().format('D.M.YY - H:m:ss'))\r\n    \r\n\r\n    const checkTime = () => {\r\n            setDate(moment().format('D MMM YY - H:m:ss'))\r\n             clearTimeout(timerId);\r\n    }\r\n    let timerId = setInterval(checkTime, 1000)\r\n    return(\r\n            <>\r\n                {date}\r\n            </>\r\n    )\r\n}\r\nexport default DateNow","import React from 'react'\r\nimport clsx from 'clsx'\r\n\r\nimport cls from './Header.module.css'\r\nimport LogoInfo from '../LogoInfo/LogoInfo'\r\nimport DateNow from '../DateNow/DateNow'\r\n\r\nconst Header = (props) => {\r\n    return(\r\n            <div className={clsx(cls.header, 'm-0 bg-dark d-flex justify-content-between align-items-center')}>\r\n                <a className={cls.logo} href=\"/\">FPlanner</a>\r\n                <p className='m-0 text-primary'><DateNow/></p>\r\n                <LogoInfo/>\r\n            </div>\r\n    )\r\n}\r\nexport default Header","import React from 'react'\r\nimport cls from './Task.module.css'\r\nimport clsx from 'clsx'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst moment = require('moment');\r\n\r\nconst Task = ({task, number, deleteTask, doneTask, unDoneTask, arrDisabledTask, addInDisabledTask}) => {\r\n    const onClickDeleteTaskHandler = (e) => {\r\n        e.preventDefault()\r\n        let taskId = e.currentTarget.getAttribute('data-taskid')\r\n        addInDisabledTask(taskId)\r\n        deleteTask(taskId)\r\n    }\r\n    const onClickIsDoneTaskHandler = (e) => {\r\n        e.preventDefault()\r\n        let taskId = e.currentTarget.getAttribute('data-taskid')\r\n        addInDisabledTask(taskId)\r\n        task.isDone ? unDoneTask(taskId) : doneTask(taskId);\r\n    }\r\n\r\n    return(\r\n        <li \r\n        // onClick={(e) => {\r\n        //     if(e.target.tagName === 'SPAN' || e.target.tagName === 'LI'){\r\n        //         window.location.pathname = '/task/' + task.id // redirectim na SingleTask with id:(newTaskId)\r\n        //     }\r\n        // }} \r\n        className={clsx('list-group-item p-1',cls.task)}>\r\n           <Link className={cls.taskBody} to={`/task/${task.id}`}>\r\n                <span>{number}</span>\r\n                <span className={task.isDone ? cls.done : ''}>\r\n                    {task.title}\r\n                </span>\r\n                <span>{task.dateE \r\n                        ? moment(task.dateE).format('DD.MM.YY - HH:mm')\r\n                        : '--no date--'}\r\n                </span>\r\n            </Link>\r\n            <button disabled={arrDisabledTask.includes(task.id)} \r\n                    data-taskid={task.id} onClick={onClickIsDoneTaskHandler} \r\n                    className={clsx('text-center btn m-0 p-0 cursor-pointer',cls.icon, {'text-success':task.isDone})}>\r\n                        <i className=\"icon-ok\"></i>\r\n            </button>\r\n            <button disabled={arrDisabledTask.includes(task.id)} \r\n                    data-taskid={task.id} \r\n                    onClick={onClickDeleteTaskHandler} \r\n                    className={clsx('text-center btn m-0 p-0 cursor-pointer',cls.icon , )}>\r\n                        <i className=\"icon-trash\"></i>\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\nexport default Task","import * as axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    //withCredentials:true,\r\n    // baseURL:'http://localhost/',\r\n    baseURL:'https://f-planner.herokuapp.com/',\r\n    // headers: {  'Access-Control-Allow-Methods': 'POST, GET, PUT, DELETE, OPTIONS',\r\n    //             'Access-Control-Allow-Origin': '*',\r\n    //             'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\r\n    // }\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(){\r\n    return instance.get(`/tasks`)\r\n    .then(response => response.data)\r\n    },\r\n    addTask(task){ //create new task\r\n        let newTask = JSON.stringify(task)\r\n        return instance.post(`/task`, {body:newTask})\r\n    },\r\n    deleteTask(id){ //delete task\r\n        // let newTask = JSON.stringify(task)\r\n        return instance.delete(`/task/${id}`)\r\n    },\r\n    done(taskId){ //set flag isDone in true\r\n        let task = JSON.stringify(taskId)\r\n        return instance.post(`/done`, {body:task})\r\n    },\r\n    unDone(taskId){ //set flag isDone in false\r\n        return instance.delete(`/done/${taskId}`)\r\n    },\r\n    getTask(taskId){\r\n        return instance.get(`/task/${taskId}`)\r\n        .then(response => response.data)\r\n    },\r\n    updateTask(task){\r\n        let taskJSON = JSON.stringify(task)\r\n        return instance.put(`/task/${task.id}`, {task:taskJSON})\r\n        \r\n    }\r\n//     unFollow(userId){\r\n//         return instance.delete(`follow/${userId}`)\r\n//         .then(response => response.data)\r\n//     },\r\n//     follow(userId){\r\n//         return instance.post(`follow/${userId}`)\r\n//         .then(response => response.data)\r\n//     },\r\n//     getProfile(userId){\r\n//         console.warn('Obsoled method. Please use \"profileAPI\" object')\r\n//         return profileAPI.getProfile(userId)\r\n//     }\r\n}\r\n// export const request = (url) => {\r\n//     axios.get(PATH + url).then((res) => {\r\n//         console.log('res: ', JSON.parse(res.data.body));\r\n//         return res\r\n\r\n//     }).catch((err) => {\r\n//         console.error(err)\r\n//     })\r\n// }","import React, {useState} from 'react'\r\nimport cls from './TaskCreate.module.css'\r\nimport clsx from 'clsx'\r\nimport { tasksAPI } from '../../API/api';   \r\n\r\nconst moment = require('moment');\r\n\r\n\r\nconst TaskCreate = ({task, number, addNewTask}) => {\r\n    const [titleState, setTitleState] = useState('')\r\n    const [disabled, setDisabled] = useState(false)\r\n    const onChangeTitleHandler = (e) => { // change value in textarea\r\n        setTitleState(e.currentTarget.value);\r\n    }\r\n    const onClickAddTaskHandler = (e) => {\r\n        console.log('onClickAddTaskHandler');\r\n        e.preventDefault()\r\n        if(!titleState.trim()) return\r\n        setDisabled(true)\r\n        let newTaskId\r\n        tasksAPI.addTask({id:1,title:titleState, description:'', dateC:moment(), dateE:'', isDone:false}).then(\r\n            (data) => {\r\n                newTaskId = data.data.id\r\n                addNewTask({id:newTaskId,title:titleState, description:'', dateC:moment(), dateE:'', isDone:false})\r\n                setTitleState('')\r\n                setDisabled(false)\r\n                //window.location.pathname = '/task#/' + newTaskId // redirectim na SingleTask with id:(newTaskId)\r\n                }\r\n            )\r\n    }\r\n\r\n    return(\r\n        <li className={clsx('list-group-item p-1',cls.task)}>\r\n            <span>#</span>\r\n            <form className='d-flex m-0' action=\"\">\r\n                <textarea autoFocus onChange={onChangeTitleHandler} \r\n                            value={titleState} \r\n                            placeholder='Create new task' \r\n                            rows='1' \r\n                            className={clsx('m-0 py-0', cls.textarea)} \r\n                            type=\"text\" />\r\n                <button  onClick={onClickAddTaskHandler} \r\n                        disabled={disabled}\r\n                        type=\"submit\" \r\n                        className={clsx('btn ml-1 p-0', cls.button)}>\r\n                            <i className=\"icon-plus\"></i>\r\n                </button>\r\n            </form>\r\n            \r\n        </li>\r\n    )\r\n}\r\nexport default TaskCreate","import React from 'react'\r\nimport cls from './TaskHeader.module.css'\r\nimport clsx from 'clsx'\r\n\r\nconst TaskHeader = ({task, number}) => {\r\n    return(\r\n        <li className={clsx('list-group-item active p-1', cls.task)}>\r\n            <span>№</span>\r\n            <span>Title</span>\r\n            <span>Date expiration</span>\r\n            <span type=\"submit\" \r\n                    className={clsx('ml-1 p-0', cls.button)}>\r\n                        <i className=\"icon-wrench\"></i>\r\n                </span>\r\n        </li>\r\n    )\r\n}\r\nexport default TaskHeader","import React from 'react'\r\n// import cls from './TasksList.module.css'\r\n// import clsx from 'clsx'\r\nimport Task from '../Task/Task'\r\nimport TaskCreate from '../TaskCreate/TaskCreate'\r\nimport TaskHeader from '../TaskHeader/TaskHeader'\r\n\r\n\r\n\r\nconst TasksList = ({tasks, addNewTask, deleteTask, doneTask, unDoneTask, arrDisabledTask, addInDisabledTask}) => {\r\n    let outTasks = tasks.map((task, idx) => {\r\n        return <Task key={idx} \r\n                    task={task} \r\n                    deleteTask={deleteTask} \r\n                    doneTask={doneTask}\r\n                    unDoneTask={unDoneTask}\r\n                    addInDisabledTask={addInDisabledTask}\r\n                    arrDisabledTask={arrDisabledTask}\r\n                    number={++idx}/>\r\n    })\r\n    return(\r\n        <ul className='list-group m-0'>\r\n            <TaskHeader/>\r\n            <TaskCreate addNewTask={addNewTask}/>\r\n            {outTasks}\r\n        </ul>\r\n    )\r\n}\r\nexport default TasksList","const SET_TASKS = 'SET_TASKS'\r\nconst ADD_NEW_TASK = 'ADD_NEW_TASK'\r\nconst DELETE_TASK = 'DELETE_TASK'\r\nconst DONE_TASK = 'DONE_TASK'\r\nconst UNDONE_TASK = 'UNDONE_TASK'\r\nconst ADD_IN_DISABLED_TASK = 'ADD_IN_DISABLED_TASK'\r\nconst REMOVE_FROM_DISABLED_TASK = 'REMOVE_FROM_DISABLED_TASK'\r\n\r\nlet initState = {\r\n    tasks: [],\r\n    disabledTask:[]\r\n\r\n}\r\n\r\nconst tasksReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n\r\n        case SET_TASKS:\r\n            return {...state, tasks:[...action.tasks]}\r\n        case ADD_NEW_TASK:\r\n            return {...state, tasks:[...state.tasks, action.newTask]}\r\n        case DELETE_TASK:\r\n            return {...state, tasks:[...state.tasks.filter((task) => { //filter arr with task and delete task with id\r\n                if(+task.id !== +action.taskId) return task\r\n                return null\r\n           })]}\r\n        case DONE_TASK:\r\n            return {...state, tasks:[...state.tasks.map((task) => { //filter arr with task and delete task with id\r\n                if(+task.id === +action.taskId) {\r\n                    task.isDone = true\r\n                    return task\r\n                }\r\n                return task\r\n           })]}\r\n        case UNDONE_TASK:\r\n            return {...state, tasks:[...state.tasks.map((task) => { //filter arr with task and delete task with id\r\n                if(+task.id === +action.taskId) {\r\n                    task.isDone = false\r\n                    return task\r\n                }\r\n                return task\r\n           })]}\r\n        case ADD_IN_DISABLED_TASK:\r\n            return {...state, disabledTask:[...state.disabledTask, +action.taskId]}\r\n        case REMOVE_FROM_DISABLED_TASK:\r\n            return {...state, disabledTask:[...state.disabledTask].filter((taskId) => {\r\n                if(+taskId !== +action.taskId) return taskId\r\n                return null\r\n            })}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setTasks = (tasks) => ({type:SET_TASKS, tasks})\r\nexport const addNewTask = (newTask) => ({type:ADD_NEW_TASK, newTask})\r\nexport const deleteTask = (taskId) => ({type:DELETE_TASK, taskId})\r\nexport const doneTask = (taskId) => ({type:DONE_TASK, taskId})\r\nexport const unDoneTask = (taskId) => ({type:UNDONE_TASK, taskId})\r\nexport const addInDisabledTask = (taskId) => ({type:ADD_IN_DISABLED_TASK, taskId})\r\nexport const removeFromDisabledTask = (taskId) => ({type:REMOVE_FROM_DISABLED_TASK, taskId})\r\nexport default tasksReducer ","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport TasksList from './TasksList'\r\nimport {addNewTask, deleteTask, setTasks, doneTask, unDoneTask, addInDisabledTask, removeFromDisabledTask} from '../../redux/tasksReducer'\r\nimport {tasksAPI} from '../../API/api'\r\n\r\n\r\n\r\n\r\nclass TasksListContainer extends React.Component{\r\n    \r\n    componentDidMount(){\r\n        tasksAPI.getTasks().then(data => {\r\n                this.props.setTasks(JSON.parse(data.body))\r\n            }\r\n        )\r\n    }\r\n    // onPageChanged = (currentPage) => {\r\n    //     this.props.requestUsers(currentPage, this.props.pageSize)\r\n    // }\r\n    render(){\r\n        return (\r\n            <TasksList tasks={this.props.tasks}\r\n                        addInDisabledTask={this.props.addInDisabledTask}\r\n                        arrDisabledTask={this.props.arrDisabledTask}\r\n                        addNewTask={this.props.addNewTask}\r\n                        deleteTask={this.props.deleteTask}\r\n                        doneTask={this.props.doneTask}\r\n                        unDoneTask={this.props.unDoneTask}\r\n                        />\r\n        )       \r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        tasks: state.tasks.tasks,\r\n        arrDisabledTask:state.tasks.disabledTask,\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addNewTask:(newTask) => {\r\n            dispatch(addNewTask(newTask))\r\n        },\r\n        deleteTask:(taskId) => {\r\n            tasksAPI.deleteTask(taskId)\r\n            .then(\r\n                (data,err) => {\r\n                    if(err) throw err\r\n                    if(+data.status === 200){\r\n                        dispatch(deleteTask(taskId))\r\n                        dispatch(removeFromDisabledTask(taskId))\r\n                    }\r\n                }\r\n            )\r\n        },\r\n        doneTask:(taskId) => {\r\n            tasksAPI.done(taskId)\r\n            .then(\r\n                (data,err) => {\r\n                    if(err) throw err\r\n                    if(+data.status === 200){\r\n                        dispatch(doneTask(taskId))\r\n                        dispatch(removeFromDisabledTask(taskId))\r\n                    }\r\n                }\r\n            )\r\n        },\r\n        unDoneTask:(taskId) => {\r\n            tasksAPI.unDone(taskId)\r\n            .then(\r\n                (data,err) => {\r\n                    if(err) throw err\r\n                    if(+data.status === 200){\r\n                        dispatch(unDoneTask(taskId))\r\n                        dispatch(removeFromDisabledTask(taskId))\r\n                    }\r\n                }\r\n            )\r\n        },\r\n        setTasks:(tasks) => {\r\n            dispatch(setTasks(tasks))\r\n        },\r\n        addInDisabledTask:(taskId) => {\r\n            dispatch(addInDisabledTask(taskId))\r\n        },\r\n    }\r\n}\r\nexport default connect( mapStateToProps, mapDispatchToProps)(TasksListContainer)","const SET_SINGLE_STATE = 'SET_SINGLE_STATE'\r\n\r\n\r\n/////********************/////////////\r\nlet initState = {\r\n    id: null,\r\n    title: '',\r\n    description: '',\r\n    dateC: '',\r\n    dateE: '',\r\n    isDone: false\r\n}\r\nconst singleTaskReducer = (state = initState, action) => {\r\n    //console.log('action: ', action.type);\r\n    switch(action.type){\r\n\r\n        case SET_SINGLE_STATE:// set value for SingleTask\r\n            return {...state, ...action.singleTask}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setSingleTask = (singleTask) => ({type:SET_SINGLE_STATE, singleTask})\r\nexport default singleTaskReducer ","import React, {useState,useEffect} from 'react'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nconst moment = require('moment')\r\n\r\n\r\n\r\nconst DatePick = ({changeDateE, singleTask}) => {\r\n  useEffect(() => {\r\n    setStartDate(new Date(moment(singleTask.dateE ? singleTask.dateE : new Date()).format('YYYY/MM/DD-HH:mm')))\r\n  },[singleTask]);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const handleOnChange = (date) => {\r\n    setStartDate(date)\r\n    changeDateE(moment(date).format())\r\n    console.log('moment(date): ', moment(date));\r\n\r\n  }\r\n  return(\r\n    <DatePicker\r\n      selected={startDate}\r\n      onChange={handleOnChange}\r\n      minDate={new Date()}\r\n      dateFormat=\"dd.MM.yy - hh:mm\"\r\n      showTimeInput\r\n      placeholderText=\"Select expiration date\"\r\n    />)\r\n  }\r\nexport default DatePick","import React, {useState, useEffect} from 'react'\r\nimport DatePick from '../Shareable/DayPicker/DatePick'\r\n\r\nimport cls from './SingleTaskForm.module.css'\r\nimport clsx from 'clsx'\r\n\r\n\r\nconst SingleTaskForm = ({ singleTask, updateSingleTask }) => {\r\n    useEffect(() => {\r\n        setTaskUpdate(singleTask)\r\n      }, [singleTask]);\r\n\r\n    const [taskUpdate, setTaskUpdate] = useState(singleTask)\r\n\r\n    const changeTitle = (e) => { // change value in title\r\n        setTaskUpdate({...taskUpdate, title:e.currentTarget.value})\r\n    }\r\n    const changeDescription = (e) => { // change value in description\r\n        setTaskUpdate({...taskUpdate, description:e.currentTarget.value})\r\n    }\r\n    const changeDateE = (dateE) => { // change value in dateE\r\n        setTaskUpdate({...taskUpdate, dateE})\r\n    }\r\n    const changeDone = (e) => { // change value in dateE\r\n        setTaskUpdate({...taskUpdate, isDone:!taskUpdate.isDone})\r\n    }\r\n    const onHandleReset = (e) => {\r\n        e.preventDefault()\r\n        setTaskUpdate(singleTask)\r\n    }\r\n    const onHandleSave = (e) => {\r\n        e.preventDefault()\r\n        updateSingleTask(taskUpdate)\r\n    }\r\n    \r\n    return (\r\n        <form>\r\n            <div className=\"d-flex\">\r\n                <label htmlFor=\"title\" className={clsx('mr-1', cls.label)}>Title:</label>\r\n                <input className={clsx(cls.input)} \r\n                        id='title' \r\n                        onChange={changeTitle} \r\n                        type=\"text\" \r\n                        value={taskUpdate.title} />\r\n            </div>\r\n            <div className=\"d-flex\">\r\n                <label htmlFor=\"description\" className={clsx('mr-1', cls.label)}>Description:</label>\r\n                <textarea className={clsx(cls.input, 'p-0 pl-1 pr-1')} \r\n                        rows='1' id='description' \r\n                        onChange={changeDescription} \r\n                        type=\"text\" \r\n                        value={taskUpdate.description} />\r\n            </div>\r\n            <div className=\"d-flex\">\r\n                <label htmlFor=\"Date expiration\" className={clsx('mr-1', cls.label)}>Date expiration:</label>\r\n                <DatePick singleTask={singleTask} changeDateE={changeDateE}/>\r\n            </div>\r\n            <div className=\"d-flex\">\r\n                <label htmlFor=\"Done\" className={clsx('mr-1', cls.label)}>Done:</label>\r\n                <input className={clsx(cls.input)} \r\n                        id='Done' \r\n                        onChange={changeDone} \r\n                        type=\"checkbox\" \r\n                        checked={taskUpdate.isDone}\r\n                        value={taskUpdate.isDone} />\r\n            </div>\r\n            <div className='d-flex justify-content-end align-items-center'>\r\n                <button onClick={onHandleSave} className='btn btn-success' type='submit'>Save</button>\r\n                <button onClick={onHandleReset} className='btn btn-danger ml-1'>Reset</button>\r\n            </div>\r\n        </form>\r\n       \r\n    )\r\n}\r\nexport default SingleTaskForm","import React from 'react'\r\nimport cls from './Preloader.module.css'\r\nimport preloaderIMG from '../../../assets/img/preloader.gif'\r\n//import clsx from 'clsx'\r\n\r\n//const moment = require('moment');\r\n\r\nconst Preloader = () => {\r\n    return(\r\n        <div className={cls.preloader}>\r\n            <img src={preloaderIMG} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n}\r\nexport default Preloader","import React from 'react'\r\nimport SingleTaskForm from './SingleTaskForm';\r\nimport Preload from '../Shareable/preloader/Preloader';\r\n\r\nconst moment = require('moment');\r\n// import cls from './SingleTask.module.css'\r\n// import clsx from 'clsx'\r\n\r\nconst SingleTask = ({singleTask, updateSingleTask}) => {\r\n    \r\n    console.log('singleTask: ', singleTask.id);\r\n    return(\r\n        <>\r\n        {singleTask.id === null \r\n        ?  <Preload/>\r\n        :   <>\r\n                <div className='d-flex justify-content-between align-items-center'>\r\n                    <h1>{singleTask.title}</h1>\r\n                    <span>Creation: {moment(singleTask.dateC).format('D MMM YY - HH:m')}</span>\r\n                </div>\r\n                <SingleTaskForm singleTask={singleTask}\r\n                                updateSingleTask={updateSingleTask}/>\r\n            </>\r\n        }</>\r\n    )\r\n}\r\nexport default SingleTask","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {setSingleTask} from '../../redux/singleTaskReducer'\r\nimport {tasksAPI} from '../../API/api'\r\nimport SingleTask from '../SingleTask/SingleTask'\r\n\r\nclass SingleTaskContainer extends React.Component{\r\n    \r\n    componentDidMount(){\r\n        let taskId = +this.props.match.params.taskId\r\n        tasksAPI.getTask(taskId).then(data => {\r\n            this.props.setSingleTask(data.task)\r\n            }\r\n        )\r\n    }\r\n    render(){\r\n        return (\r\n            <SingleTask singleTask={this.props.singleTask}\r\n                        updateSingleTask={this.props.updateSingleTask}\r\n                        />\r\n        )       \r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return{\r\n        singleTask:state.singleTask\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSingleTask:(singleTask) => {\r\n            dispatch(setSingleTask(singleTask))\r\n        },\r\n        updateSingleTask:(newSingleTask) => {\r\n            tasksAPI.updateTask(newSingleTask)\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps)(SingleTaskContainer)","import React from 'react'\r\nimport {Route, Switch} from 'react-router-dom'\r\n// import cls from './Content.module.css'\r\n// import clsx from 'clsx'\r\nimport TasksListContainer from '../TasksList/TasksListContainer'\r\nimport SingleTaskContainer from '../SingleTask/SingleTaskContainer'\r\n\r\nconst Content = (props) => {\r\n    return(\r\n            <div className='container p-1'>\r\n                <Switch/>\r\n                    <Route exact path='/'>\r\n                        <TasksListContainer/>\r\n                    </Route>\r\n                    <Route path='/task/:taskId' render={(props) => <SingleTaskContainer {...props} />}/>    \r\n                <Switch/>\r\n            </div>\r\n    )\r\n}\r\nexport default Content","import React from 'react';\nimport cls from './App.module.css';\n\n\nimport Header from '../Header/Header'\nimport Content from '../Content/Content';\n\nfunction App() {\n  return (\n    <div className={cls.App}>\n        <Header />\n        <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from 'redux'\r\nimport tasksReducer from './tasksReducer'\r\nimport singleTaskReducer from './singleTaskReducer'\r\nimport {reducer as formReducer} from 'redux-form'\r\n\r\nconst reducers = combineReducers({\r\n    tasks: tasksReducer,\r\n    singleTask: singleTaskReducer,  \r\n    form:formReducer,\r\n})\r\n\r\nlet store = createStore(reducers)\r\n\r\nwindow.store = store\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <Provider store={store}>\n        <App /> \n      </Provider>\n    </React.StrictMode>\n  </BrowserRouter>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__3wevK\",\"icon\":\"Task_icon__3MW69\",\"done\":\"Task_done__1jKQ-\",\"taskBody\":\"Task_taskBody__aCzIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logoInfo\":\"LogoInfo_logoInfo__1aRco\",\"icon\":\"LogoInfo_icon__1JeLP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"TaskCreate_task__222Xq\",\"textarea\":\"TaskCreate_textarea__2XxAK\",\"field\":\"TaskCreate_field__28mxz\",\"button\":\"TaskCreate_button__2i4nh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2ety9\",\"logo\":\"Header_logo__2EnLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"TaskHeader_task__2ScMU\",\"button\":\"TaskHeader_button__1AYMz\"};"],"sourceRoot":""}